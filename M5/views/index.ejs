<!DOCTYPE html>
<html>

<head>
	<script type="application/javascript">

		const SERVERADDRESS = "http://127.0.0.1:3000"
		var serverInput = 1.0;

		// use XML HTTP request to grab data from the server (central)
		let xmlhttp = new XMLHttpRequest()
		xmlhttp.onreadystatechange = function () {
			if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
				let responseText = xmlhttp.responseText
				serverInput = parseFloat(JSON.parse(responseText).sensorValue)

			}
		}

		// periodically grab data
		let getData = () => {
			xmlhttp.open("POST", SERVERADDRESS, true)
			xmlhttp.setRequestHeader("Content-type", "application/json")
			xmlhttp.send("")
			setTimeout(() => {
				getData()
			}, 10)
			console.log(serverInput);
		}

		getData()

		var canvas;
		var canvasContext;
		var ballX = 50;
		var ballY = 50;
		var ballSpeedX = 10;
		var ballSpeedY = 4;
		var paddle1Y = 250;
		var paddle2Y = 250;
		const PADDLE_HEIGHT = 100;
		const PADDLE_WIDTH = 10;
		const BUFFER = 10;
		var score = 0;
		var highScore = 0;
		var running = false;

		var paddleSpeed = 10;

		function calcMousePos(evt) {
		var rect = canvas.getBoundingClientRect();
		var root = document.documentElement;
		var mouseX = evt.clientX - rect.left - root.scrollLeft;
		var mouseY = evt.clientY - rect.top - root.scrollTop;

		return {
			x:mouseX,
			y:mouseY
		};
		}

		window.onload = () => {
			canvas = document.getElementById('gameCanvas');
			canvasContext = canvas.getContext('2d');
			var framesPerSecond = 40;
			setInterval(function(){
				moveEverything();
				drawEverything();
			}, 1000/framesPerSecond);
			
			canvas.addEventListener('mousemove',
				function(evt) {
				var mousePos = calcMousePos(evt);
				paddle2Y = mousePos.y - (PADDLE_HEIGHT/2);
				});
				
		}

		function drawNet(){
		for(var i = 0; i < canvas.height; i+=15){
			colorRect(canvas.width/2-1, i, 2, 5,'gray');
		}
		}

		function drawEverything(){
			// black background
			colorRect(0, 0, canvas.width, canvas.height, 'black');
			// draws ball
			colorCircle(ballX, ballY, 10, 'yellow');
			// left paddle
			colorRect(BUFFER, paddle1Y, PADDLE_WIDTH, PADDLE_HEIGHT, 'red');
			// right paddle
			colorRect(canvas.width - (PADDLE_WIDTH + BUFFER), paddle2Y, PADDLE_WIDTH, PADDLE_HEIGHT, 'blue');
			drawScore();
			drawNet();
		
		}

		function ballReset(){
			ballX = canvas.width/2;
			ballY = canvas.height/2;
			ballSpeedX = -ballSpeedX;
			ballSpeedY = -ballSpeedY;
		}

		function moveEverything(){
			if (serverInput > 0.9 && paddle1Y >= 0) {
				paddle1Y -= paddleSpeed;
			}
			else if (serverInput < -0.9 && paddle1Y + PADDLE_HEIGHT < canvas.height) {
				paddle1Y += paddleSpeed;
			}
			ballX += ballSpeedX;
			ballY += ballSpeedY;
			if((ballX + 5) >= (canvas.width - BUFFER - PADDLE_WIDTH)) {
				// if ball hits paddle, else reset
				if(ballY > paddle2Y - 20 && ballY < (paddle2Y + PADDLE_HEIGHT + 20)){
					ballSpeedX = -ballSpeedX;
					var deltaY = ballY - (paddle2Y+PADDLE_HEIGHT/2);
					ballSpeedY = deltaY * 0.25;
					score += 1;
					ballSpeedX += .8;
					paddleSpeed += .8;
				}
				else {
					ballReset();
					if(score > highScore){
						highScore = score;
					}
					score = 0;
					ballSpeedX = 10;
					ballSpeedY = 4;
					paddleSpeed = 10;
				}
			}
			if((ballX - 5) <= (BUFFER + PADDLE_WIDTH)) {
				// if ball hits paddle, else reset
				if(ballY > paddle1Y - 20 && ballY < (paddle1Y + PADDLE_HEIGHT + 20)){
					ballSpeedX = -ballSpeedX;
					var deltaY = ballY - (paddle1Y+PADDLE_HEIGHT/2);
					ballSpeedY = deltaY * 0.25;
					score += 1;
					ballSpeedX += .8;
					paddleSpeed += .8;
				}
				else {
					ballReset();
					if(score > highScore){
						highScore = score;
					}
					score = 0;
					ballSpeedX = 10;
					ballSpeedY = 4;
					paddleSpeed = 10;
				}
			}
			if(ballY >= canvas.height) {
				ballSpeedY = -ballSpeedY;
			}
			if(ballY <= 0){
				ballSpeedY = -ballSpeedY;
			}
		}

		function drawScore(){
			canvasContext.lineWidth=1;
			canvasContext.fillStyle='white';
			// canvasContext.lineStyle="#ffff00";
			canvasContext.font="20px sans-serif";
			var scoretext = "Current Score: " + score.toString();
			canvasContext.fillText(scoretext, canvas.width - 750, 40);
			var highscoretext = "High Score: " + highScore.toString();
			canvasContext.fillText(highscoretext, canvas.width - 200, 40);
		}

		function colorRect(leftX, topY, width, height, drawColor){
			canvasContext.fillStyle = drawColor;
			canvasContext.fillRect(leftX, topY, width, height)
		}

		function colorCircle(centerX, centerY, radius, color){
			canvasContext.fillStyle = color;
			canvasContext.beginPath();
			canvasContext.arc(centerX, centerY, radius, 0, Math.PI*2, true);
			canvasContext.fill();

		}

	</script>
</head>

<body>
	<canvas id="gameCanvas" width="800" height="600"></canvas>
</body>

<script src="Https://D3js.Org/D3.V7.Min.Js"></script>

<script type="application/javascript">

	

</script>

</html>